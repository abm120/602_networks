# SBCP

Here are the Simple Broadcast Chat Protocol (SBCP) server and client
applications created by Tao Zhao and Anil Balasubramanya Murthy (Team 20)
for the first network programming assignment of ECEN 602 in 2016 fall.

## Build & Installation

We use the standard Makefile for building the project. Open up a terminal
window, change into the (decompressed) project directory, and execute

    make

This will build both the server and the client applications. Standard
build tool chain (such as the GCC suite) is required to build the package.

You can use `make server` or `make client` to build the server or the client
respectively.

To clean up the auxiliary files generated by the building process, issue

    make cleanobj

If you want to remove executable files (`server` and `client`) in addition
to the auxiliary files, use

    make clean

Installation is not required to use the applications, and thus not recommended.
See the following section for sample usage.

## Sample Usage

On the server side, issue

    ./server server_ip server_port max_clients

On the client side, use

    ./client username server_ip server_port

Multiple clients can connect to the same server. Make sure you specify the
server IP address and port number consistently. We recommend a high port
number (like 50000) for unprivileged users.

Make sure you use a different username for each new user, otherwise the join
request will be declined. You can reuse usernames only after they have left
the chat room.

On the client side, you can send out messages by typing them out, with `Enter`
key stroke as the ending. The messages will be sent to the server and then
forwarded to all other connected clients.

Use `Ctrl+C` to terminate either the server or the client.

## Test Cases

Note - SBCP Works successfully implies - JOIN, SEND, RECV and FWD are all successful.

### Co-located server and clients

    ./server 127.0.0.1 50000 5
    ./client anna 127.0.0.1 50000
    ./client elsa 127.0.0.1 50000

    SBCP Works successfully. Clients anna and elsa are able to communicate with each other over simple chat.

### Internet connection

    ./server 165.91.159.51 50000 5    # server on hera
    ./client anna 165.91.159.51 50000 # laptop 1
    ./client elsa 165.91.159.51 50000 # laptop 2

     SBCP Works successfully. Clients anna and elsa are able to communicate with each other over simple chat.

### Client with Same Username requests to JOIN

    ./server 127.0.0.1 50000 5
    ./client anna 127.0.0.1 50000
    ./client anna 127.0.0.1 50000

    SBCP Server Detects username clash & rejects join request of second client with 'Username Clash' Reason

### Client JOIN request exceeds max number of clients

    ./server 127.0.0.1 50000 5
    ./client anna 127.0.0.1 50000
    ./client elsa 127.0.0.1 50000
    ./client maya 127.0.0.1 50000
    ./client liya 127.0.0.1 50000
    ./client anny 127.0.0.1 50000
    ./client elly 127.0.0.1 50000

    SBCP Server detects breach of Max Client limit and rejects join request of sixth client with 'Max Limit reached' Reason
    

## Errata aka Changelog

- SBCP packet format
- client data structure
- Use select() for I/O multiplexing
- Handle command line arguments
- Basic socket connection

## Notes

The example chat server in Beej's Guide gave us an impression
that using readfds alone (without using of writefds) is sufficient for recv
and send. This turns out to be not true for the client side, since client
needs to read and write to the same socket to server. However, this works
for server forwarding, because forwarding only writes to file descriptors
that are not currently being read.
